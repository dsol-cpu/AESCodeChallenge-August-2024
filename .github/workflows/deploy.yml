name: Build and Deploy WebGL

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build Unity WebGL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Library folder
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-
            Library-

      - name: Build WebGL
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: WebGL
          buildName: Build
          versioning: Semantic

      # Ensure directories exist and set permissions
      - name: Create and prepare directories
        run: |
          mkdir -p build/WebGL/Build
          chmod -R 755 build

      # Create server configurations with proper permissions
      - name: Create server configurations
        run: |
          # Create web.config
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <configuration>
            <system.webServer>
              <staticContent>
                <mimeMap fileExtension=".unityweb" mimeType="application/octet-stream" />
                <mimeMap fileExtension=".gz" mimeType="application/gzip" />
              </staticContent>
              <rewrite>
                <rules>
                  <rule name="Serve gzip files" stopProcessing="true">
                    <match url=".(js|data|symbols|unityweb)\.gz$" />
                    <action type="Rewrite" url="{R:0}" />
                    <serverVariables>
                      <set name="RESPONSE_Content-Encoding" value="gzip" />
                      <set name="RESPONSE_Content-Type" value="application/javascript" />
                    </serverVariables>
                  </rule>
                </rules>
              </rewrite>
            </system.webServer>
          </configuration>' > build/WebGL/Build/web.config

          # Create .htaccess
          echo 'AddEncoding gzip .gz
          AddType application/gzip .gz

          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} \.(js|data|symbols|unityweb)\.gz$
          RewriteRule .* - [E=CONTENT_ENCODING:gzip]
          RewriteRule .* - [E=CONTENT_TYPE:application/javascript]

          <FilesMatch "\.gz$">
            Header set Content-Encoding "gzip"
            Header set Content-Type "application/javascript"
          </FilesMatch>' > build/WebGL/Build/.htaccess

          # Create custom index.html
          echo '<!DOCTYPE html>
          <html lang="en-us">
            <head>
              <meta charset="utf-8">
              <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
              <title>Unity WebGL Player</title>
            </head>
            <body style="margin: 0px; overflow: hidden;">
              <canvas id="unity-canvas" style="width: 100%; height: 100%; background: #231F20"></canvas>
              <script src="Build.loader.js"></script>
              <script>
                createUnityInstance(document.querySelector("#unity-canvas"), {
                  dataUrl: "Build.data.gz",
                  frameworkUrl: "Build.framework.js.gz",
                  codeUrl: "Build.wasm.gz",
                  streamingAssetsUrl: "StreamingAssets",
                  companyName: "DefaultCompany",
                  productName: "WebGL Build",
                  productVersion: "0.1",
                });
              </script>
            </body>
          </html>' > build/WebGL/Build/index.html

          # Set proper permissions for all created files
          chmod 644 build/WebGL/Build/web.config
          chmod 644 build/WebGL/Build/.htaccess
          chmod 644 build/WebGL/Build/index.html

      - name: List build directory
        run: |
          echo "Build directory contents:"
          ls -la build/WebGL/Build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Build-WebGL
          path: build/WebGL
          retention-days: 1

  deploy:
    needs: build
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: Build-WebGL
          path: build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/Build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
